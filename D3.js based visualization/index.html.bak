//Visualization by Vinamra presidential election 2021

<!DOCTYPE html>

<html>
<title>Presidential Race 2020</title>
<head>
    
  <meta charset="utf-8" name="viewport" content="width=device-width, initial-scale=1.0">
   <script src="https://d3js.org/d3.v4.min.js"></script>
   <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    
 <link href="https://fonts.googleapis.com/css?family=Nanum+Gothic" rel="stylesheet">    
    
  <style>
        body {               
        font-family: 'Nanum Gothic', sans-serif;
        }
        
    
  
      { margin:0 auto;}
    h1,p {
        margin:5px;
    }
    svg {
        margin-left:auto; margin-right:auto; display:block;
    }

    .axis {
        font: 25px helvetica;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }
    .tooltip {
        position: absolute;
        width: 100px;
        height: 150px;
        pointer-events: none;
        text-align: center;
    }
      
    vertical_dotted_line {
        border-left: 1px dotted #444;
        height: 50px;
        width: 1px;
        position: absolute;
        z-index: 10;
        
       
        left: 50%;
    } 
      
    vertical_line {
        border-left: dotted solid #ff0000;
        height: 20px;
        width: 1px;
    }

    h1 { 
  display: block;
  font-size: 120px;
  margin-top: 0.00em;
  font-weight: bold;
font-family: 'Nanum Gothic', sans-serif;
}
      p { 
          display: block;
          font-size: 18px;
          margin-top: 0.67em;
          margin-left: 5em;
          margin-right:5em;
          font-weight: bold;
          font-family: 'Nanum Gothic', sans-serif;
}

     
.output {
  text-align:center;
  font-family: 'Nanum Gothic', sans-serif;
  font-weight: 900;
    text-transform: uppercase;
    color:#566573;
    font-size:25px;
    
   h2 {
    font-size:50px;
  }

}
     
/* Cursor Styling */

.cursor::after {
  content:'';
  display:inline-block;
  margin-left:3px;
  background-color:white;
  animation-name:blink;
  animation-duration:0.5s;
  animation-iteration-count: infinite;
}
h2.cursor::after {
  height:24px;
  width:13px;
}
p.cursor::after {
  height:13px;
  width:6px;
}

@keyframes blink {
  0% {
    opacity:1;
  }
  49% {
    opacity:1;
  }
  50% {
    opacity:0;
  }
  100% {
    opacity:0;
  }
} 
       
      
    </style>  

</head>
  
<body>

    
    <h1 id="race" align="center">The race to </h1> 
    
    <div style="text-align: center;" id="img"> 
        <img src="2020.jpg" style="width:1200px;height:400px;opacity:0.8;filter:alpha(opacity=80);">
    </div>

        
    <p align="center" id="major"> 
        With more than 22 elected officials and notable public figures who have filed to run for the 2020 US Presidential Elections, 
        <br> can we track how these candidates are trending in the digital landscape?
        <br> This visual will help capture some of that dynamic through the lens of Google Trends that offers insights into what interests Americans about their candidates, and the moments that dominate the election campaigns.  
        <br> We analyze the top 9 contenders (8 Dem,1 Rep) including the incumbent – President Donald Trump, over the last 3 months. 
        <br> This visual will help answer questions such as – 
    </p>

   
<div class="container py-5">
  <div class="output" id="output">
      <h2 class="cursor"><font color="#f00"></font></h2>
    <p></p>
  </div>
</div>
  
    <p align="center" id="instructions"> 
        This interactive visual tracks the popularity of these candidates and highlights the search interest for the top contenders, surfacing what Americans are most interested in about their candidates during the course of the campaigns.
        <br> The popularity scores are relative to one other and are generated by the Google Trends. Google Trends analyzes a random sample of searches using Google's search engine in a specific time period and indexes them numerically from 0 to 100. All the other values are set in comparison to the most searched. It also generates the terms or topics searched in context of the candidates.
      <br><br><br>Hover over the candidate in the legend to observe the trend in isolation along with top search terms used in relation to that candidate.
     <br>Click and drag mouse over the Time scale (x axis) to zoom into a specific period and double click on the chart to zoom out.
        <br> How to intepret the visual - The larger the area for a candidate, the more popular a candidate is.The popularity index or score enclosed in () next to the terms that appear when hovered over the legend. The max popularity index is 100 and the lowest is 0. 
    </p> 
  
   

    <!-- Load d3.js & color scale-->

    <!-- Create a div where the graph will take place -->
    <div id="my_dataviz"></div>
    
    <p> WHAT DO THESE TRENDS TELL US? </p>
<p> In terms of overall popularity, the visual ranks the Democratic candidates in the order that is consistent with some of the early primary polling done in states like New Hampshire and Iowa, with the highest popularity index for Joe Biden, followed by Bernie Sanders, Pete Buttigieg, and then Kamala Harris. As time progresses and we inch closer towards the democratic debates and other events, it will be interesting to see if google trends align well with the polling numbers.
We see spikes in the popularity index of the candidates especially around the time they announce their bid for Presidency such as with Bernie Sanders (2/19), Beto O’ Rourke (3/14), Pete Buttigieg (4/14). It is interesting to see that post the bid; some candidates like Pete Buttigieg are able to maintain their momentum vs candidates like Beto O’ Rourke who aren’t able to carry forward that momentum. 
 </p>
    
<p><img src="trump.jpg" style="width:50px;height:50px;" >
Donald Trump 
    <br>Donald Trump’s popularity has been the highest overall. This is majorly a result of him being the current President that would naturally result in a relatively larger search volume owing to news coming out of his office – policies, campaign related,tweets etc. 
    </p>
    
<p><img src="biden.png" style="width:50px;height:50px;" >
Joe Biden
    <br>Biden has had a high popularity index since the beginning of Feb - even before he announced his presidential bid. We see a spike in his popularity index with a surge in google searches around the time the Lucy Flores scandal broke out followed by interest around the Anita Hill hearings and then the SNL sketch that took place. Once can also observe the time effect of these events as the search volume an the popularity index reverts back to the normal after 1.5 weeks. His popularity index surges to a maximum when he announced his presedential bid.
</p>
    
<p><img src="bernie.png" style="width:50px;height:50px;" >
Bernie Sanders
    <br>Bernie has a relatively stable popularity index with users mostly googling about his rallies across various cities and some of the recent controversial comments he has made about the Boston Bomber, Venezuelan Government etc.</p>
    
<p><img src="pete.png" style="width:50px;height:50px;" >
Peter Buttigieg 
    <br>As the only openly gay candidate in this race, it was interesting to observe that most of the google searches on him by American users are not about his sexuality indicating that it might not be that big of a concern to voters. In fact, the initial searches revolved around just his name and how to pronounce it, and thereafter as he makes more media appearances, one can see the surge in his popularity as users google his TV appearances of shows like Bill Maher, The View, CNN Town Halls, etc. </p>
    
<p><img src="harris.png" style="width:50px;height:50px;" >
Kamala Harris 
    <br>We see a mix of searches owing to her ethnicity, her background, her husband and parents. We also see a spike in searches around her views on the Jussie Smollet case.
</p>
    
<p><img src="beto.png" style="width:50px;height:50px;" >
Beto O'Rourke 
    <br>Beto saw the maximum gain in popularity around the time of his presidential bid announcement that led to one of the fastest and highest fundraising by a campaign. This is clearly evident from the visual as well. Unfortunately, his popularity slows down post the bid and has since then failed to gain any momentum.
  </p>
    
<p><img src="warren.png" style="width:50px;height:50px;" >
Elizabeth Warren 
    <br>While her popularity compared to the other candidates has been relatively low, it was interesting to see a rise in her popularity score as she made an announcement regarding her “Student-Debt Relief” policy. A lot of the google searches around Senator Warren revolve around users enquiring about her age, probably indicating an area of concern for her campaign.</p>
    
<p><img src="yang.png" style="width:50px;height:50px;" >
Andrew Yang 
    <br>Yang has been a low-key candidate with a stable popularity index. Searches around his candidacy revolve around people enquiring about his 2020 campaign, his policies and interestingly his appearances on conservative media platforms such as Fox News, Ben Shapiro Interview, etc.</p>
    
<p><img src="cory.png" style="width:50px;height:50px;" >
Cory Booker 
    <br>Most of the breakout terms that led to a surge in his popularity have been mostly related to his personal life. The dominant google searches have been about his dating life, his actress girlfriend, questions surrounding his sexuality, etc. This is in stark contrast to the other candidates where google searches have been more about their campaigns, TV appearances, or policies.</p>

    
    
    <script>

        // values to keep track of the number of letters typed, which quote to use. etc. Don't change these values.
var i = 0,
    a = 0,
    isBackspacing = false,
    isParagraph = false;

// Typerwrite text content 
var textArray = [ "What are Americans googling about their candidates?",
                 "How popular are the candidates compared to each other?",
                 "How quickly do these trends shift?"];

// Speed (in milliseconds) of typing.
var speedForward = 100, //Typing Speed
    speedWait = 1000, // Wait between typing and backspacing
    speedBetweenLines = 1000, //Wait between first and second lines
    speedBackspace = 25; //Backspace Speed

//Run the loop
typeWriter("output", textArray);

function typeWriter(id, ar) {
  var element = $("#" + id),
      aString = ar[a],
      eHeader = element.children("h2"), //Header element
      eParagraph = element.children("p"); //Subheader element
  
  // Determine if animation should be typing or backspacing
  if (!isBackspacing) {
    
    // If full string hasn't yet been typed out, continue typing
    if (i < aString.length) {
      
      // If character about to be typed is a pipe, switch to second line and continue.
      if (aString.charAt(i) == "|") {
        isParagraph = true;
        eHeader.removeClass("cursor");
        eParagraph.addClass("cursor");
        i++;
        setTimeout(function(){ typeWriter(id, ar); }, speedBetweenLines);
        
      // If character isn't a pipe, continue typing.
      } else {
        // Type header or subheader depending on whether pipe has been detected
        if (!isParagraph) {
          eHeader.text(eHeader.text() + aString.charAt(i));
        } else {
          eParagraph.text(eParagraph.text() + aString.charAt(i));
        }
        i++;
        setTimeout(function(){ typeWriter(id, ar); }, speedForward);
      }
      
    // If full string has been typed, switch to backspace mode.
    } else if (i == aString.length) {
      
      isBackspacing = true;
      setTimeout(function(){ typeWriter(id, ar); }, speedWait);
      
    }
    
  // If backspacing is enabled
  } else {
    
    // If either the header or the paragraph still has text, continue backspacing
    if (eHeader.text().length > 0 || eParagraph.text().length > 0) {
      
      // If paragraph still has text, continue erasing, otherwise switch to the header.
      if (eParagraph.text().length > 0) {
        eParagraph.text(eParagraph.text().substring(0, eParagraph.text().length - 1));
      } else if (eHeader.text().length > 0) {
        eParagraph.removeClass("cursor");
        eHeader.addClass("cursor");
        eHeader.text(eHeader.text().substring(0, eHeader.text().length - 1));
      }
      setTimeout(function(){ typeWriter(id, ar); }, speedBackspace);
    
    // If neither head or paragraph still has text, switch to next quote in array and start typing.
    } else { 
      
      isBackspacing = false;
      i = 0;
      isParagraph = false;
      a = (a + 1) % ar.length; //Moves to next position in array, always looping back to 0
      setTimeout(function(){ typeWriter(id, ar); }, 50);
      
    }
  }
}
        
        // set the dimensions and margins of the graph
        var margin = {top: 200, right: 3, bottom: 50, left: 3},
            width = 1200 - margin.left - margin.right,
            height = 700 - margin.top - margin.bottom, y = null, firstData = null, area = null, bbox = null;
        
        

        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");

        bbox = document.querySelector("#my_dataviz").getBoundingClientRect();
//        centerDrawingArea = [(bbox.x + bbox.width / 2), (bbox.y  + bbox.height / 2)];
   
        // Parse the Data
        d3.csv("/data/use2.csv", 
        function(d){
           return {
               date : d3.timeParse("%m/%d/%Y")(d.date),
               Andrew_Yang : +d.Andrew_Yang,
               Bernie_Sanders : +d.Bernie_Sanders,
               Beto_ORourke : +d.Beto_ORourke,
               Cory_Booker : +d.Cory_Booker,
               Donald_Trump : +d.Donald_Trump,
               Elizabeth_Warren : +d.Elizabeth_Warren,
               Joe_Biden : +d.Joe_Biden,
               Kamala_Harris : +d.Kamala_Harris,
               Pete_Buttigieg : +d.Pete_Buttigieg,
               Andrew_Yang_Term : d.Andrew_Yang_Term,
               Bernie_Sanders_Term : d.Bernie_Sanders_Term,
               Beto_ORourke_Term : d.Beto_ORourke_Term,
               Cory_Booker_Term : d.Cory_Booker_Term,
               Donald_Trump_Term : d.Donald_Trump_Term,
               Elizabeth_Warren_Term : d.Elizabeth_Warren_Term,
               Joe_Biden_Term : d.Joe_Biden_Term,
               Kamala_Harris_Term : d.Kamala_Harris_Term,
               Pete_Buttigieg_Term : d.Pete_Buttigieg_Term
           }
         },


        function(data) {
            //////////
            // GENERAL //
            //////////
            firstData = data;
            
            var month = new Array(12);
            month[0] = "Jan";
            month[1] = "Feb";
            month[2] = "Mar";
            month[3] = "Apr";
            month[4] = "May";
            month[5] = "Jun";
            month[6] = "Jul";
            month[7] = "Aug";
            month[8] = "Sep";
            month[9] = "Oct";
            month[10] = "Nov";
            month[11] = "Dec";
            
            // List of groups = header of the csv files
            //var keys = data.columns.slice(1)
            var keys = 
                ["Cory_Booker","Andrew_Yang","Elizabeth_Warren", "Kamala_Harris", "Pete_Buttigieg","Beto_ORourke",
                 "Bernie_Sanders","Joe_Biden","Donald_Trump"];

            // color palette
            var color = d3.scaleOrdinal()
            .domain(keys)
            //.range(d3.schemeSet3);
            .range(["#641a80","#8c2981","#b73779","#de4968","#f7705c","#fe9f6d","#fa5c2e","#ec3023","#af0225"])
            


            //stack the data
            var stackedData = d3.stack()
            //.keys(keys)
            .keys(["Andrew_Yang","Bernie_Sanders","Beto_ORourke","Cory_Booker","Donald_Trump","Elizabeth_Warren","Joe_Biden","Kamala_Harris","Pete_Buttigieg"])
            .order(d3.stackOrderAscending)
            //.offset(d3.stackOffsetWiggle)
            (data);
            

            //////////
            // AXIS //
            //////////

            // Add X axis
            var x = d3.scaleTime()
                .domain(d3.extent(data, function(d) { 
                    return new Date(d.date); 
                }))
                .range([ 0, width ]);

            
            const graphDateFormat = d3.timeFormat("%d %b");
            
            var xAxis = svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x).ticks(7).tickFormat(graphDateFormat));

            // Add X axis label:
            svg.append("text")
              .attr("text-anchor", "end")
              .attr("x", width)
              .attr("y", height+40 )
              .text("Date");

            // Add Y axis label:
            svg.append("text")
              .attr("text-anchor", "end")
              .attr("x", 0)
              .attr("y", 0 )
              .text("# Popularity Index")
              .attr("text-anchor", "start");

            // Add Y axis
            y = d3.scaleLinear()
                .domain([0, 250])
                .range([ height, 0 ]);
            svg.append("g")
                .call(d3.axisLeft(y).ticks(5));

            // Define the div for the tooltip 
            var divArray = new Array(data.length).fill(0);
            
            for (var k =0; k < divArray.length; k = k + 1) {
                divArray[k] = d3.select("body").append("div")	
                    .attr("class", "tooltip")				
                    .style("opacity", 0)
                    .attr("id", "div_" + k);
            }

            //////////
            // BRUSHING AND CHART //
            //////////

            // Add a clipPath: everything out of this area won't be drawn.
            var clip = svg.append("defs").append("svg:clipPath")
              .attr("id", "clip")
              .append("svg:rect")
              .attr("width", width )
              .attr("height", height )
              .attr("x", 0)
              .attr("y", 0);

            // Add brushing
            var brush = d3.brushX()                 // Add the brush feature using the d3.brush function
              .extent( [ [0,0], [width,height] ] ) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area
              .on("end", updateChart); // Each time the brush selection changes, trigger the 'updateChart' function

            // Create the scatter variable: where both the circles and the brush take place
            var areaChart = svg.append('g')
                .attr("clip-path", "url(#clip)");
            
            // Area generator
            area = d3.area()
                .x(function(d) { return x(d.data.date); })
                .y0(function(d) {    
                    return y(d[0]); 
                })
                .y1(function(d) {
                    return y(d[1]); }
                );

            // Show the areas
            areaChart
                .selectAll("mylayers")
                .data(stackedData)
                .enter()
                .append("path")
                .attr("class", function(d) { return "myArea " + d.key })
                .style("fill", function(d) { return color(d.key); })
                .attr("d", area);

            // Add the brushing
            areaChart
                .append("g")
                .attr("class", "brush")
                .call(brush);
            
            // Tooltip
            var focus = svg.append("g")
                .attr("class", "focus")
                .style("display", "none");

            focus.append("circle")
                .attr("r", 5);

            focus.append("text")
                .attr("x", 9)
                .attr("dy", ".35em")
                .style("font-size",15);



          var idleTimeout
          function idled() { idleTimeout = null; }

          // A function that update the chart for given boundaries
          function updateChart() {

                extent = d3.event.selection

                // If no selection, back to initial coordinate. Otherwise, update X axis domain
                if(!extent){
                  if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit
                  x.domain(d3.extent(data, function(d) { 
                      return new Date(d.date); 
                      
                  }))
                }else{
                    console.log('update');
                    console.log([ x.invert(extent[0]), x.invert(extent[1]) ]);
                    var dateString = x.invert(extent[0]).getDate() + " " + x.invert(extent[0]).getMonth();
                  x.domain([ x.invert(extent[0]), x.invert(extent[1])]);
//                      .
//                  range([ x.invert(extent[0]).getDate() + " " + x.invert(extent[0]).getMonth(), 
//                            x.invert(extent[1]).getDate() + " " + x.invert(extent[1]).getMonth()])
                  areaChart.select(".brush").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done
                }

                // Update axis and area position
                xAxis.transition().duration(1000).call(d3.axisBottom(x).ticks(7).tickFormat(graphDateFormat))
                areaChart
                  .selectAll("path")
                  .transition().duration(1000)
                  .attr("d", area)
            };



            //////////
            // HIGHLIGHT GROUP //
            //////////

            // What to do when one group is hovered
            var highlight = function(d, key){
                
                
                
                var terms = d + '_Term';
            
                
                
                var heights = new Array(data.length).fill(0);
                for (var ds = 0; ds <= key; ds = ds + 1) {
                    for (var count = 0; count < data.length; count = count + 1) {
                        heights[count] = heights[count] + data[count][keys[ds]];
                    }
                }
                
                // reduce opacity of all groups
                d3.selectAll(".myArea").style("opacity", .1);
                // expect the one that is hovered
                d3.select("."+d).style("opacity", 1);
                var svgElement = document.getElementById("my_dataviz").getBoundingClientRect();
                
//focus.attr("transform", "translate(" + x(d.date) + "," + (500 - margin.top - margin.bottom)*depl/100+ ")");                
                // Plotting tooltips
                for (var k = 0; k < heights.length; k = k + 1) {
//                    var xStart = bbox.x + bbox.width/ 2 - width/2;
                    var xStart = svgElement.x + margin.left + svgElement.width/ 2 - width/2;
                    
                    var xEnd = xStart + width;
                    var xCoordinate = xStart + x(data[k].date) - 50 - margin.left;
                    if (data[k][terms] 
                        && (xCoordinate >= xStart - 50 - margin.left) && 
                        (xCoordinate <= xEnd - 50 - margin.left)
//                    && 
//                        
//                        (bbox.left + bbox.width - width) * 0.5 + x(data[k].date) >= xStart &&
//                        (bbox.left + bbox.width - width) * 0.5 + x(data[k].date) <= xEnd
                       ) {
//                        var s =  20 + 500 + margin.top + y(heights[k]) + margin.bottom - 60;
                        var s =  1000 + y(heights[k]);
                        var heightOFSvg = svg.style('height');
                        console.log(s);
                        divArray[k].transition()		
                            .duration(200)		
                            .style("opacity", .9);		
                        var dateString = data[k].date.getDate() + " " + month[data[k].date.getMonth()];
                        var h = data[k][d];
                        var htmlString = "<font color=" + color(d) + ">" + data[k][terms] + "(" + h + ")</font><br/><br/> <vertical_dotted_line>";
                        var xCoordinate = xStart + x(data[k].date) - 50 - margin.left;
                        
                        divArray[k].html(htmlString)	
                            .style("left", xStart + x(data[k].date) - 50 - margin.left + "px")		
                            .style("top", s + "px");
                        
                    }
                }
                
                
//                var s =  10 + 500 + margin.top + y(hei) + margin.bottom;
//                console.log(s);
                
//                div.transition()		
//                    .duration(200)		
//                    .style("opacity", .9);		
//                div.html(d + "<br/>")	
//                    .style("left", (bbox.left + bbox.width - width) * 0.5 + x(data[3].date)  + "px")		
//                    .style("top", s + "px");	
            };

            // And when it is not hovered anymore
            var noHighlight = function(d){
                d3.selectAll(".myArea").style("opacity", 1);
                for (var k = 0; k < divArray.length; k = k + 1) {
                    divArray[k].transition()		
                        .duration(500)		
                        .style("opacity", 0);	    
                }
                
            };



            //////////
            // LEGEND //
            //////////

            // Add one dot in the legend for each name.
            var size = 15;
            svg.selectAll("myrect")
                .data(keys)
                .enter()
                .append("rect")
                .attr("x", 1000)
                .attr("y", function(d,i){ return i*(size+7) - 200}) // 100 is where the first dot appears. 25 is the distance between dots
                .attr("width", size)
                .attr("height", size)
                .style("fill", function(d){ return color(d);})
                .on("mouseover", function(d){return highlight(d);})
                .on("mouseleave", noHighlight)

            // Add one dot in the legend for each name.
            svg.selectAll("mylabels")
                .data(keys)
                .enter()
                .append("text")
                .attr("x", 1000 + size*1.2)
                .attr("y", function(d,i){ return  i*(size+7) + (size/2) - 200}) // 100 is where the first dot appears. 25 is the distance between dots
                .style("fill", function(d){ return color(d)})
                .text(function(d){ return d})
                .attr("text-anchor", "left")
                .style("alignment-baseline", "middle")
                .on("mouseover", highlight)
                .on("mouseleave", noHighlight)

        });

</script>
</body>
</html>